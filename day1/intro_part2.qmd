---
title: "Introduction to R (part 2)"
author: "David A Hughes"
format: 
  revealjs:
    slide-number: true
    aspect-ratio: 16:9
    theme: [default, ../css/custom.scss]
    footer: "Introduction to R (part 1)"
    logo: "../images/pb_white.png"
    chalkboard: true
    incremental: false 
    code-line-numbers: false
editor: visual
---

```{r}
knitr::opts_chunk$set(echo = TRUE)
####
if (!exists("show.solutions"))
    show.solutions <- F
## show output for solutions copy only, use as results=hide.results()
hide.results <- function() ifelse(show.solutions, "markup", "hide")
## show code and output for solutions copy only, use as include=hide.all()
hide.all <- function() show.solutions
## show figure for solutions copy only, use as show.fig=hide.figure()
hide.figure <- function() ifelse(show.solutions, "asis", "hide")
####
library(tidyverse)
```

## Handle missing data

<br>
```{r, echo = TRUE}
y <- c("A","B","A","B","C")
y[2] <- 2
y[3] <- NA
y
is.na(y)
is.na(y[3])
na.omit(y)
```

## Save and load data: working directory

<br>
To open files, you will need to tell R where the files are. To do this, it helps to know where R will start looking. This is called the 'working directory'.

```{r, eval=FALSE, results=hide.results()}
getwd()
```
    [1] "Users/person/Documents/PBRC/Intro/To/R"
    
You can change this using setwd.
```{r, eval=FALSE}
setwd("Users/NEWperson/Documents/work/stuff/not/to/share")
```


## Save and load data: reading csv files {.scrollable .smaller}

::::columns

:::{.column width="40%"}
<br>
Suppose I have a spreadsheet stored in CSV format.

    "id","age","sex","diet","bmi"
    1,32,"M",0,25.7957231474661
    2,35,"M",0,28.8952139451377
    3,41,"M",0,29.9258448186199
    4,29,"M",0,27.3383500990741
    5,33.5,"M",1,28.2469210985821
    6,33.2,"M",1,27.0473176810354
    7,32.9,"M",1,30.3031786852156
    8,32.6,"F",1,28.5621419729205
    9,32.3,"F",1,28.05344654591
    10,32,"F",1,28.8864676350323
...
:::

:::{.column width="60%"}
read.csv will read csv file and store it as data frames.

```{r}
mydata <- read.csv("bmi.csv")
```


    - NOTE there is also a read.table(sep = "") function and a read.delim(sep = "\t")
    

```{r}
mydata[1:3,]

head(mydata, n = 3)

mydata$bmi[1:5]

mydata[5,]
```

:::

::::


## Save and load data: writing csv files

```{r, eval=FALSE}
mydata.corrected <- mydata
mydata.corrected$sex[5] <- "F" ## make correction
write.csv(mydata.corrected, "bmi_corrected.csv", row.names=F, col.names=TRUE, quote=FALSE)
```

write.table is similar but allows the user to change the column separator character. Here we separate columns by a semicolon rather than a comma.

```{r, eval=FALSE}
write.table(mydata.corrected, "bmi-corrected.csv", row.names=F, col.names=T, quote=F, sep=";")
```

## Statistical analyses: basic summaries

```{r}
mean(mydata$bmi) # mean
median(mydata$bmi) # median
sd(mydata$bmi) # standard deviatiomn
min(mydata$bmi) # minimum
quantile(mydata$bmi, probs = c(0.025, 0.975)) # quantiles (95%CI)
table(mydata$sex) # frequencies
```

## Statistical analyses: dataset summaries

- The summary function can be used to summarize single variables

```{r}
summary(mydata$bmi)
```

- or entire datasets.

```{r}
summary(mydata)
```


## Statistical analyses: evaluating associations

::::columns
:::{.column width="50%"}
- correlation

```{r}
cor(mydata$bmi, mydata$age, method = "pearson")
```

- effect estimate

```{r}
fit <- lm(bmi~age, data=mydata)
fit
```


:::
:::{.column width="50%"}

- plot

```{r, fig.width = 5, fig.height=4}
plot(mydata$age, mydata$bmi, 
     xlab = "age", ylab = "BMI", 
     pch = 21, cex = 2.5, 
     bg = "dodgerblue", col = "red")
abline(fit, col = "grey30", lwd = 3, lty = 2)
```

:::
::::

## Statistical analyses: summarizing regression model fits

```{r}
summary(fit)
```

## Statistical analyses: fitting multiple variable models

```{r}
fit <- lm(bmi ~ age + sex + diet, data=mydata)

summary(fit)
```

## Statistical analyses: retrieving model fit elements

```{r}
coef(fit)
coef(summary(fit))
is.data.frame( coef(summary(fit)) )
is.matrix( coef(summary(fit)) )
coef(summary(fit))["age","Estimate"]
names(summary(fit))
```

## Plotting: scatterplot

```{r, fig.width = 5, fig.height=4}
plot(mydata$age, mydata$bmi, 
     xlab = "age", ylab = "BMI", 
     pch = 21, cex = 2.5, 
     bg = "dodgerblue", col = "red")
abline(fit, col = "grey30", lwd = 3, lty = 2)
```

## Plotting: histogram

::::columns
:::{.column width="50%"}

 -  histogram of BMI
 
```{r, fig.width = 5, fig.height=4}
hist(mydata$bmi, main="BMI",xlab = "BMI", 
     col = "limegreen" )
```
:::

:::{.column width="50%"}

 -  histogram of linear model residuals
 
```{r, fig.width = 5, fig.height=4}
fitres = residuals(fit)
hist(fitres, main="lm() residuals",xlab = "BMI", 
     col = "darkslateblue" )
```

:::
::::

# Plotting: boxplot

```{r, fig.width = 4, fig.height = 6}
boxplot(bmi ~ diet, data=mydata, col = "darkgoldenrod2")
```

## Save Plot

 - save as a pdf
 
```{r, eval=FALSE}
pdf(file = "boxplot.pdf", width=4, height=6)
boxplot(bmi~diet, data=mydata)
dev.off()
```

 - save as a postscript
 
```{r, eval=FALSE}
postscript(file = "boxplot.eps", width=4, height=6)
boxplot(bmi~diet, data = mydata)
dev.off()
```

## Decisions: ask questions

```{r}
x <- 11:15
x[3] == 13 # Does 13 equals 13 ?
x[3] != 12 # Does 13 not equal 12 ?
x[3] < x[4]  # Is 13 less than 14 ?
x[1] <= x[2] & !x[2] > x[3]   ## Is 11 less than or equal to 12 and is 12 not greater than 13 ?
x[1] < x[2] | x[2] > x[3]     ## Is 11 < 12 or is 12 > 13 ?
x < 12 # Which values in x are smaller than 12?
all(x >= 11) # Are each value in x greater than or equal to 11 ?

```

## Decisions: alternatives {.scrollable}

```{r}
score = 90
if (score > 85) {
  grade <- "A"
} else {
  grade <- "F"
}

grade

score = seq(70,100, by = 5)

( grade <- ifelse(score > 85, "A", "F") )

score = 60

if (score > 85) {
  grade <- "A"
  } else if (score > 75){
    grade <- "B"
    } else {
      grade <- "F"
      }
grade

score = seq(70,100, by = 5)

( grade <- ifelse(score > 85, "A", ifelse(score > 75, "B", "F")) )


```
<br> <br> <br>

## Recipes: create and apply {.smaller .smaller .scrollable}

Functions consist of a sequence of commands applied to a set of variables that return some output.
R provides many functions such as help, cor, median.
Users can create their own functions for repetitive tasks, e.g. a function for the distance of a point from 0.

 - define a function
 
```{r}
euclidean.norm <- function(x) {
  out <- sqrt(sum(x^2))
  return(out)
}
```

  - use the function
  
```{r}
euclidean.norm(c(3,4))
euclidean.norm(c(2,3,6))
euclidean.norm(c(1,4,8))
```

## Recipes: to repeat a query

::::columns
:::{.column width="50%"}
  - while statements
  
```{r}
n = nrow(mydata)
i = 1
out = c()
while(i <= n){
  o = sum( mydata$age[i] < 32  )
  out = c(out, o)
  ## update i
  i = i + 1
}
out
```

  - for loops

```{r}
out = c()
for(i in 1:nrow(mydata)){
  o = sum( mydata$age[i] < 32  )
  out = c(out, o)
}
out
```
:::

:::{.column width="50%"}
  
  - sapply
  
```{r}
out = sapply(1:nrow(mydata), function(i){
  sum( mydata$age[i] < 32  )
})
out
```

  - apply (rows or columns)
```{r}
out = apply(mydata, 1, function(x){
  sum( x[2] < 32 )
})
out
```
:::
::::

## Share: loading packages {.scrollable}

An R package is a collection of functions and/or data sets created for use by other R users. A package can be loaded using library.

  - install a package 
  
```{r, eval=FALSE}
install.packages("Hmisc")
```

  - load a package
  
```{r}
library(Hmisc)
```
After loading, functions and data provided by the package can be used.

```{r}
describe(c(1,1,2,1,3,5,1,3,5,2,3,4))
```
## Share: installing packages

  - install a package 
  
```{r, eval=FALSE}
install.packages("Hmisc")
```


  - get help on a package
  
```{r, eval = FALSE}
help(package="Hmisc")
```

## Share: learn more R with "swirl"

![](https://swirlstats.com/images/swirl_new_large_final.png){style="background-color: white; padding: 10px;" width=50%}

swirl website link [here](https://swirlstats.com)

```{r, eval=FALSE}
install.packages("swirl")
library(swirl)
```

    | Hi! Type swirl() when you are ready to begin.

## Share: creating packages for others

<br>

If you have a set of R functions and/or a dataset that you think others might like to use, create a package and put them in it!

[Here](https://support.rstudio.com/hc/en-us/articles/200486488-Developing-Packages-with-RStudio) is a good place to get started. This includes a [link](http://r-pkgs.had.co.nz/) to Hadley Wickham's book "R Packages"

You can also share functions you write as [gists](https://gist.github.com).

Here is a function I shared as a gist. [rntransform](https://gist.github.com/hughesevoanth/a9a7113d46ea561a0b7dde405e584b75)

It can also be found in an R package (moosefun) I wrote and share on github [here](https://github.com/hughesevoanth/moosefun).



# Practical 1.2
